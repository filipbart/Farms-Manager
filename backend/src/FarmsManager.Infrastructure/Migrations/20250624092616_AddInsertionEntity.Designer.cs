// <auto-generated />
using System;
using FarmsManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FarmsManager.Infrastructure.Migrations
{
    [DbContext(typeof(FarmsManagerContext))]
    [Migration("20250624092616_AddInsertionEntity")]
    partial class AddInsertionEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("farms_manager")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<int>("Identifier")
                        .HasColumnType("integer")
                        .HasColumnName("identifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_cycle");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_cycle_farm_id");

                    b.HasIndex("Identifier", "Year", "FarmId")
                        .IsUnique()
                        .HasDatabaseName("ix_cycle_identifier_year_farm_id");

                    b.ToTable("cycle", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ActiveCycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("active_cycle_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.HasKey("Id")
                        .HasName("pk_farm");

                    b.HasIndex("ActiveCycleId")
                        .HasDatabaseName("ix_farm_active_cycle_id");

                    b.ToTable("farm", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Area")
                        .HasColumnType("integer")
                        .HasColumnName("area");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_henhouse");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_henhouse_farm_id");

                    b.ToTable("henhouse", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.InsertionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BodyWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("body_weight");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid>("HatcheryId")
                        .HasColumnType("uuid")
                        .HasColumnName("hatchery_id");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<DateOnly>("InsertionDate")
                        .HasColumnType("date")
                        .HasColumnName("insertion_date");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_insertion");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_insertion_henhouse_id");

                    b.HasIndex("CycleId", "FarmId", "HenhouseId")
                        .IsUnique()
                        .HasDatabaseName("ix_insertion_cycle_id_farm_id_henhouse_id");

                    b.ToTable("insertion", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.HasKey("Id")
                        .HasName("pk_hatchery");

                    b.ToTable("hatchery", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserSessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<DateTime?>("DeactivatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("LastSeenAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_session");

                    b.HasIndex("SessionId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_session_session_id");

                    b.ToTable("user_session", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany("Cycles")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cycle_farm_farm_id");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "ActiveCycle")
                        .WithMany()
                        .HasForeignKey("ActiveCycleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_farm_cycle_active_cycle_id");

                    b.Navigation("ActiveCycle");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany("Henhouses")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_henhouse_farm_farm_id");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.InsertionEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insertion_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insertion_henhouse_henhouse_id");

                    b.Navigation("Cycle");

                    b.Navigation("Henhouse");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", b =>
                {
                    b.Navigation("Cycles");

                    b.Navigation("Henhouses");
                });
#pragma warning restore 612, 618
        }
    }
}
