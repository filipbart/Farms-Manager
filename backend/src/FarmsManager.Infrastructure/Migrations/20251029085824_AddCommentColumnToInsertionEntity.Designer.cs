// <auto-generated />
using System;
using System.Collections.Generic;
using FarmsManager.Domain.Aggregates.UserAggregate.Models;
using FarmsManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FarmsManager.Infrastructure.Migrations
{
    [DbContext(typeof(FarmsManagerContext))]
    [Migration("20251029085824_AddCommentColumnToInsertionEntity")]
    partial class AddCommentColumnToInsertionEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("farms_manager")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AddToAdvances")
                        .HasColumnType("boolean")
                        .HasColumnName("add_to_advances");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("ContractType")
                        .HasColumnType("text")
                        .HasColumnName("contract_type");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Position")
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("salary");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_employee");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_employee_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_employee_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_employee_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_employee_modified_by");

                    b.ToTable("employee", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeFileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.HasKey("Id")
                        .HasName("pk_employee_file");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_employee_file_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_employee_file_deleted_by");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_employee_file_employee_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_employee_file_modified_by");

                    b.ToTable("employee_file", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeePayslipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BankTransferAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("bank_transfer_amount");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("numeric")
                        .HasColumnName("base_salary");

                    b.Property<decimal>("BonusAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("bonus_amount");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<decimal>("Deductions")
                        .HasColumnType("numeric")
                        .HasColumnName("deductions");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<decimal>("NetPay")
                        .HasColumnType("numeric")
                        .HasColumnName("net_pay");

                    b.Property<decimal>("OtherAllowances")
                        .HasColumnType("numeric")
                        .HasColumnName("other_allowances");

                    b.Property<decimal>("OvertimeHours")
                        .HasColumnType("numeric")
                        .HasColumnName("overtime_hours");

                    b.Property<decimal>("OvertimePay")
                        .HasColumnType("numeric")
                        .HasColumnName("overtime_pay");

                    b.Property<string>("PayrollPeriod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("payroll_period");

                    b.HasKey("Id")
                        .HasName("pk_employee_payslip");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_employee_payslip_created_by");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_employee_payslip_cycle_id");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_employee_payslip_deleted_by");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_employee_payslip_employee_id");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_employee_payslip_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_employee_payslip_modified_by");

                    b.ToTable("employee_payslip", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeReminderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<int>("DaysToRemind")
                        .HasColumnType("integer")
                        .HasColumnName("days_to_remind");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_employee_reminder");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_employee_reminder_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_employee_reminder_deleted_by");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_employee_reminder_employee_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_employee_reminder_modified_by");

                    b.ToTable("employee_reminder", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseAdvanceCategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_expense_advance_category");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_expense_advance_category_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_expense_advance_category_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_expense_advance_category_modified_by");

                    b.ToTable("expense_advance_category", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseAdvanceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("ExpenseAdvanceCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_advance_category_id");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_expense_advance");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_expense_advance_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_expense_advance_deleted_by");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_expense_advance_employee_id");

                    b.HasIndex("ExpenseAdvanceCategoryId")
                        .HasDatabaseName("ix_expense_advance_expense_advance_category_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_expense_advance_modified_by");

                    b.ToTable("expense_advance", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseAdvancePermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("permission_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_expense_advance_permission");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_expense_advance_permission_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_expense_advance_permission_deleted_by");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_expense_advance_permission_employee_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_expense_advance_permission_modified_by");

                    b.HasIndex("UserId", "EmployeeId", "PermissionType")
                        .IsUnique()
                        .HasDatabaseName("IX_ExpenseAdvancePermissions_UserEmployeeType")
                        .HasFilter("date_deleted_utc IS NULL");

                    b.ToTable("expense_advance_permission", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseContractorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ExpenseTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_type_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.HasKey("Id")
                        .HasName("pk_expense_contractor");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_expense_contractor_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_expense_contractor_deleted_by");

                    b.HasIndex("ExpenseTypeId")
                        .HasDatabaseName("ix_expense_contractor_expense_type_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_expense_contractor_modified_by");

                    b.ToTable("expense_contractor", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseProductionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("ExpenseContractorId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_contractor_id");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<decimal>("InvoiceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("invoice_total");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("vat_amount");

                    b.HasKey("Id")
                        .HasName("pk_expense_production");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_expense_production_created_by");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_expense_production_cycle_id");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_expense_production_deleted_by");

                    b.HasIndex("ExpenseContractorId")
                        .HasDatabaseName("ix_expense_production_expense_contractor_id");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_expense_production_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_expense_production_modified_by");

                    b.ToTable("expense_production", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<bool>("NonRemovable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("non_removable");

                    b.HasKey("Id")
                        .HasName("pk_expense_type");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_expense_type_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_expense_type_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_expense_type_modified_by");

                    b.ToTable("expense_type", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FallenStockAggregate.Entities.FallenStockEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateIrzSentUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_irz_sent_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text")
                        .HasColumnName("document_number");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<Guid>("InternalGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("internal_group_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("SentToIrzBy")
                        .HasColumnType("uuid")
                        .HasColumnName("sent_to_irz_by");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValue("FallCollision")
                        .HasColumnName("type");

                    b.Property<Guid?>("UtilizationPlantId")
                        .HasColumnType("uuid")
                        .HasColumnName("utilization_plant_id");

                    b.HasKey("Id")
                        .HasName("pk_fallen_stock");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_fallen_stock_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_fallen_stock_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_fallen_stock_farm_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_fallen_stock_henhouse_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_fallen_stock_modified_by");

                    b.HasIndex("UtilizationPlantId")
                        .HasDatabaseName("ix_fallen_stock_utilization_plant_id");

                    b.HasIndex("CycleId", "FarmId", "HenhouseId", "Date")
                        .IsUnique()
                        .HasDatabaseName("ix_fallen_stock_cycle_id_farm_id_henhouse_id_date")
                        .HasFilter("date_deleted_utc IS NULL");

                    b.ToTable("fallen_stock", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FallenStockAggregate.Entities.FallenStockPickupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_fallen_stock_pickup");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_fallen_stock_pickup_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_fallen_stock_pickup_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_fallen_stock_pickup_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_fallen_stock_pickup_modified_by");

                    b.HasIndex("CycleId", "FarmId", "Date")
                        .IsUnique()
                        .HasDatabaseName("ix_fallen_stock_pickup_cycle_id_farm_id_date")
                        .HasFilter("date_deleted_utc IS NULL");

                    b.ToTable("fallen_stock_pickup", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FallenStockAggregate.Entities.UtilizationPlantEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("IrzNumber")
                        .HasColumnType("text")
                        .HasColumnName("irz_number");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.HasKey("Id")
                        .HasName("pk_utilization_plant");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_utilization_plant_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_utilization_plant_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_utilization_plant_modified_by");

                    b.ToTable("utilization_plant", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<int>("Identifier")
                        .HasColumnType("integer")
                        .HasColumnName("identifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_cycle");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_cycle_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_cycle_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_cycle_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_cycle_modified_by");

                    b.HasIndex("Identifier", "Year", "FarmId")
                        .IsUnique()
                        .HasDatabaseName("ix_cycle_identifier_year_farm_id")
                        .HasFilter("date_deleted_utc IS NULL");

                    b.ToTable("cycle", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ActiveCycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("active_cycle_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.Property<string>("ProducerNumber")
                        .HasColumnType("text")
                        .HasColumnName("producer_number");

                    b.HasKey("Id")
                        .HasName("pk_farm");

                    b.HasIndex("ActiveCycleId")
                        .HasDatabaseName("ix_farm_active_cycle_id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_farm_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_farm_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_farm_modified_by");

                    b.ToTable("farm", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Area")
                        .HasColumnType("integer")
                        .HasColumnName("area");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_henhouse");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_henhouse_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_henhouse_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_henhouse_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_henhouse_modified_by");

                    b.ToTable("henhouse", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.InsertionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BodyWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("body_weight");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateIrzSentUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_irz_sent_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text")
                        .HasColumnName("document_number");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid>("HatcheryId")
                        .HasColumnType("uuid")
                        .HasColumnName("hatchery_id");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<DateOnly>("InsertionDate")
                        .HasColumnType("date")
                        .HasColumnName("insertion_date");

                    b.Property<Guid>("InternalGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("internal_group_id");

                    b.Property<string>("IrzComment")
                        .HasColumnType("text")
                        .HasColumnName("irz_comment");

                    b.Property<bool>("IsSentToIrz")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent_to_irz");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<bool>("ReportedToWios")
                        .HasColumnType("boolean")
                        .HasColumnName("reported_to_wios");

                    b.Property<Guid?>("SentToIrzBy")
                        .HasColumnType("uuid")
                        .HasColumnName("sent_to_irz_by");

                    b.Property<string>("WiosComment")
                        .HasColumnType("text")
                        .HasColumnName("wios_comment");

                    b.HasKey("Id")
                        .HasName("pk_insertion");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_insertion_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_insertion_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_insertion_farm_id");

                    b.HasIndex("HatcheryId")
                        .HasDatabaseName("ix_insertion_hatchery_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_insertion_henhouse_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_insertion_modified_by");

                    b.HasIndex("CycleId", "FarmId", "HenhouseId")
                        .IsUnique()
                        .HasDatabaseName("ix_insertion_cycle_id_farm_id_henhouse_id")
                        .HasFilter("date_deleted_utc IS NULL");

                    b.ToTable("insertion", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedContractorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.HasKey("Id")
                        .HasName("pk_feed_contractor");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_feed_contractor_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_feed_contractor_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_feed_contractor_modified_by");

                    b.ToTable("feed_contractor", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedInvoiceCorrectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<decimal>("InvoiceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("invoice_total");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("PaymentDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date_utc");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("vat_amount");

                    b.HasKey("Id")
                        .HasName("pk_feed_invoice_correction");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_feed_invoice_correction_created_by");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_feed_invoice_correction_cycle_id");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_feed_invoice_correction_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_feed_invoice_correction_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_feed_invoice_correction_modified_by");

                    b.ToTable("feed_invoice_correction", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedInvoiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("text")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<decimal?>("CorrectUnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("correct_unit_price");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<Guid?>("InvoiceCorrectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_correction_id");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<decimal>("InvoiceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("invoice_total");

                    b.Property<string>("ItemName")
                        .HasColumnType("text")
                        .HasColumnName("item_name");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("PaymentDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date_utc");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("vat_amount");

                    b.Property<string>("VendorName")
                        .HasColumnType("text")
                        .HasColumnName("vendor_name");

                    b.HasKey("Id")
                        .HasName("pk_feed_invoice");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_feed_invoice_created_by");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_feed_invoice_cycle_id");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_feed_invoice_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_feed_invoice_farm_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_feed_invoice_henhouse_id");

                    b.HasIndex("InvoiceCorrectionId")
                        .HasDatabaseName("ix_feed_invoice_invoice_correction_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_feed_invoice_modified_by");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_feed_invoice_payment_id");

                    b.ToTable("feed_invoice", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedNameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_feed_name");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_feed_name_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_feed_name_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_feed_name_modified_by");

                    b.ToTable("feed_name", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedPaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValue("Unrealized")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_feed_payment");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_feed_payment_created_by");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_feed_payment_cycle_id");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_feed_payment_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_feed_payment_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_feed_payment_modified_by");

                    b.ToTable("feed_payment", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedPriceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateOnly>("PriceDate")
                        .HasColumnType("date")
                        .HasColumnName("price_date");

                    b.HasKey("Id")
                        .HasName("pk_feed_price");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_feed_price_created_by");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_feed_price_cycle_id");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_feed_price_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_feed_price_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_feed_price_modified_by");

                    b.ToTable("feed_price", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasConsumptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancelledAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at_utc");

                    b.Property<Guid?>("CorrectionForId")
                        .HasColumnType("uuid")
                        .HasColumnName("correction_for_id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<decimal>("QuantityConsumed")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity_consumed");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_gas_consumption");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_gas_consumption_created_by");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_gas_consumption_cycle_id");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_gas_consumption_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_gas_consumption_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_gas_consumption_modified_by");

                    b.ToTable("gas_consumption", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasConsumptionSourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("ConsumedQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("consumed_quantity");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("GasConsumptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("gas_consumption_id");

                    b.Property<Guid>("GasDeliveryId")
                        .HasColumnType("uuid")
                        .HasColumnName("gas_delivery_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.HasKey("Id")
                        .HasName("pk_gas_consumption_source");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_gas_consumption_source_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_gas_consumption_source_deleted_by");

                    b.HasIndex("GasConsumptionId")
                        .HasDatabaseName("ix_gas_consumption_source_gas_consumption_id");

                    b.HasIndex("GasDeliveryId")
                        .HasDatabaseName("ix_gas_consumption_source_gas_delivery_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_gas_consumption_source_modified_by");

                    b.ToTable("gas_consumption_source", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasContractorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.HasKey("Id")
                        .HasName("pk_gas_contractor");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_gas_contractor_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_gas_contractor_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_gas_contractor_modified_by");

                    b.ToTable("gas_contractor", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasDeliveryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("GasContractorId")
                        .HasColumnType("uuid")
                        .HasColumnName("gas_contractor_id");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<decimal>("InvoiceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("invoice_total");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.Property<decimal>("UsedQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("used_quantity");

                    b.HasKey("Id")
                        .HasName("pk_gas_delivery");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_gas_delivery_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_gas_delivery_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_gas_delivery_farm_id");

                    b.HasIndex("GasContractorId")
                        .HasDatabaseName("ix_gas_delivery_gas_contractor_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_gas_delivery_modified_by");

                    b.ToTable("gas_delivery", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.Property<string>("ProducerNumber")
                        .HasColumnType("text")
                        .HasColumnName("producer_number");

                    b.HasKey("Id")
                        .HasName("pk_hatchery");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_hatchery_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_hatchery_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_hatchery_modified_by");

                    b.ToTable("hatchery", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryNameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_hatchery_name");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_hatchery_name_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_hatchery_name_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_hatchery_name_modified_by");

                    b.ToTable("hatchery_name", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryNoteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_hatchery_note");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_hatchery_note_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_hatchery_note_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_hatchery_note_modified_by");

                    b.ToTable("hatchery_note", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryPriceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("HatcheryName")
                        .HasColumnType("text")
                        .HasColumnName("hatchery_name");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_hatchery_price");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_hatchery_price_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_hatchery_price_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_hatchery_price_modified_by");

                    b.HasIndex("HatcheryName", "Date")
                        .IsUnique()
                        .HasDatabaseName("ix_hatchery_price_hatchery_name_date")
                        .HasFilter("date_deleted_utc IS NULL");

                    b.ToTable("hatchery_price", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataFailureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<int>("DeadCount")
                        .HasColumnType("integer")
                        .HasColumnName("dead_count");

                    b.Property<int>("DefectiveCount")
                        .HasColumnType("integer")
                        .HasColumnName("defective_count");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.HasKey("Id")
                        .HasName("pk_production_data_failure");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_production_data_failure_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_production_data_failure_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_production_data_failure_farm_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_production_data_failure_henhouse_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_production_data_failure_modified_by");

                    b.HasIndex("CycleId", "FarmId", "HenhouseId")
                        .IsUnique()
                        .HasDatabaseName("ix_production_data_failure_cycle_id_farm_id_henhouse_id")
                        .HasFilter("date_deleted_utc IS NULL");

                    b.ToTable("production_data_failure", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataFlockLossMeasureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<int?>("FlockLoss1Day")
                        .HasColumnType("integer")
                        .HasColumnName("flock_loss1day");

                    b.Property<int?>("FlockLoss1Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("flock_loss1quantity");

                    b.Property<int?>("FlockLoss2Day")
                        .HasColumnType("integer")
                        .HasColumnName("flock_loss2day");

                    b.Property<int?>("FlockLoss2Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("flock_loss2quantity");

                    b.Property<int?>("FlockLoss3Day")
                        .HasColumnType("integer")
                        .HasColumnName("flock_loss3day");

                    b.Property<int?>("FlockLoss3Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("flock_loss3quantity");

                    b.Property<int?>("FlockLoss4Day")
                        .HasColumnType("integer")
                        .HasColumnName("flock_loss4day");

                    b.Property<int?>("FlockLoss4Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("flock_loss4quantity");

                    b.Property<Guid>("HatcheryId")
                        .HasColumnType("uuid")
                        .HasColumnName("hatchery_id");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<Guid>("InsertionId")
                        .HasColumnType("uuid")
                        .HasColumnName("insertion_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.HasKey("Id")
                        .HasName("pk_production_data_flock_loss_measure");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_production_data_flock_loss_measure_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_production_data_flock_loss_measure_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_production_data_flock_loss_measure_farm_id");

                    b.HasIndex("HatcheryId")
                        .HasDatabaseName("ix_production_data_flock_loss_measure_hatchery_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_production_data_flock_loss_measure_henhouse_id");

                    b.HasIndex("InsertionId")
                        .HasDatabaseName("ix_production_data_flock_loss_measure_insertion_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_production_data_flock_loss_measure_modified_by");

                    b.HasIndex("CycleId", "FarmId", "HenhouseId", "HatcheryId")
                        .IsUnique()
                        .HasDatabaseName("ix_production_data_flock_loss_measure_cycle_id_farm_id_henhous")
                        .HasFilter("date_deleted_utc IS NULL");

                    b.ToTable("production_data_flock_loss_measure", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataRemainingFeedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<string>("FeedName")
                        .HasColumnType("text")
                        .HasColumnName("feed_name");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<decimal>("RemainingTonnage")
                        .HasColumnType("numeric")
                        .HasColumnName("remaining_tonnage");

                    b.Property<decimal>("RemainingValue")
                        .HasColumnType("numeric")
                        .HasColumnName("remaining_value");

                    b.HasKey("Id")
                        .HasName("pk_production_data_remaining_feed");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_production_data_remaining_feed_created_by");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_production_data_remaining_feed_cycle_id");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_production_data_remaining_feed_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_production_data_remaining_feed_farm_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_production_data_remaining_feed_henhouse_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_production_data_remaining_feed_modified_by");

                    b.ToTable("production_data_remaining_feed", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataTransferFeedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("FeedName")
                        .HasColumnType("text")
                        .HasColumnName("feed_name");

                    b.Property<Guid>("FromCycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_cycle_id");

                    b.Property<Guid>("FromFarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_farm_id");

                    b.Property<Guid>("FromHenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_henhouse_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("ToCycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_cycle_id");

                    b.Property<Guid>("ToFarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_farm_id");

                    b.Property<Guid>("ToHenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_henhouse_id");

                    b.Property<decimal>("Tonnage")
                        .HasColumnType("numeric")
                        .HasColumnName("tonnage");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_production_data_transfer_feed");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_production_data_transfer_feed_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_production_data_transfer_feed_deleted_by");

                    b.HasIndex("FromCycleId")
                        .HasDatabaseName("ix_production_data_transfer_feed_from_cycle_id");

                    b.HasIndex("FromFarmId")
                        .HasDatabaseName("ix_production_data_transfer_feed_from_farm_id");

                    b.HasIndex("FromHenhouseId")
                        .HasDatabaseName("ix_production_data_transfer_feed_from_henhouse_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_production_data_transfer_feed_modified_by");

                    b.HasIndex("ToCycleId")
                        .HasDatabaseName("ix_production_data_transfer_feed_to_cycle_id");

                    b.HasIndex("ToFarmId")
                        .HasDatabaseName("ix_production_data_transfer_feed_to_farm_id");

                    b.HasIndex("ToHenhouseId")
                        .HasDatabaseName("ix_production_data_transfer_feed_to_henhouse_id");

                    b.ToTable("production_data_transfer_feed", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataWeighingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid>("HatcheryId")
                        .HasColumnType("uuid")
                        .HasColumnName("hatchery_id");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int?>("Weighing1Day")
                        .HasColumnType("integer")
                        .HasColumnName("weighing1day");

                    b.Property<decimal?>("Weighing1Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weighing1weight");

                    b.Property<int?>("Weighing2Day")
                        .HasColumnType("integer")
                        .HasColumnName("weighing2day");

                    b.Property<decimal?>("Weighing2Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weighing2weight");

                    b.Property<int?>("Weighing3Day")
                        .HasColumnType("integer")
                        .HasColumnName("weighing3day");

                    b.Property<decimal?>("Weighing3Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weighing3weight");

                    b.Property<int?>("Weighing4Day")
                        .HasColumnType("integer")
                        .HasColumnName("weighing4day");

                    b.Property<decimal?>("Weighing4Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weighing4weight");

                    b.Property<int?>("Weighing5Day")
                        .HasColumnType("integer")
                        .HasColumnName("weighing5day");

                    b.Property<decimal?>("Weighing5Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weighing5weight");

                    b.HasKey("Id")
                        .HasName("pk_production_data_weighing");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_production_data_weighing_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_production_data_weighing_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_production_data_weighing_farm_id");

                    b.HasIndex("HatcheryId")
                        .HasDatabaseName("ix_production_data_weighing_hatchery_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_production_data_weighing_henhouse_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_production_data_weighing_modified_by");

                    b.HasIndex("CycleId", "FarmId", "HenhouseId", "HatcheryId")
                        .IsUnique()
                        .HasDatabaseName("ix_production_data_weighing_cycle_id_farm_id_henhouse_id_hatch")
                        .HasFilter("date_deleted_utc IS NULL");

                    b.ToTable("production_data_weighing", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataWeightStandardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<int>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_production_data_weight_standard");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_production_data_weight_standard_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_production_data_weight_standard_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_production_data_weight_standard_modified_by");

                    b.ToTable("production_data_weight_standard", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SaleAggregate.Entities.SaleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("base_price");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("ConfiscatedCount")
                        .HasColumnType("integer")
                        .HasColumnName("confiscated_count");

                    b.Property<decimal>("ConfiscatedWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("confiscated_weight");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateIrzSentUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_irz_sent_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<int>("DeadCount")
                        .HasColumnType("integer")
                        .HasColumnName("dead_count");

                    b.Property<decimal>("DeadWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("dead_weight");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("DirectoryPath")
                        .HasColumnType("text")
                        .HasColumnName("directory_path");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text")
                        .HasColumnName("document_number");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<decimal>("FarmerWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("farmer_weight");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<Guid>("InternalGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("internal_group_id");

                    b.Property<bool>("IsSentToIrz")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent_to_irz");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("OtherExtras")
                        .HasColumnType("jsonb")
                        .HasColumnName("other_extras");

                    b.Property<decimal>("PriceWithExtras")
                        .HasColumnType("numeric")
                        .HasColumnName("price_with_extras");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateOnly>("SaleDate")
                        .HasColumnType("date")
                        .HasColumnName("sale_date");

                    b.Property<Guid?>("SentToIrzBy")
                        .HasColumnType("uuid")
                        .HasColumnName("sent_to_irz_by");

                    b.Property<Guid>("SlaughterhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("slaughterhouse_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_sale");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_sale_created_by");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_sale_cycle_id");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_sale_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_sale_farm_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_sale_henhouse_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_sale_modified_by");

                    b.HasIndex("SlaughterhouseId")
                        .HasDatabaseName("ix_sale_slaughterhouse_id");

                    b.ToTable("sale", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SaleAggregate.Entities.SaleFieldExtraEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_sale_field_extra");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_sale_field_extra_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_sale_field_extra_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_sale_field_extra_modified_by");

                    b.ToTable("sale_field_extra", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SaleAggregate.Entities.SaleInvoiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<decimal>("InvoiceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("invoice_total");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("payment_date");

                    b.Property<Guid>("SlaughterhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("slaughterhouse_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("vat_amount");

                    b.HasKey("Id")
                        .HasName("pk_sale_invoice");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_sale_invoice_created_by");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_sale_invoice_cycle_id");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_sale_invoice_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_sale_invoice_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_sale_invoice_modified_by");

                    b.HasIndex("SlaughterhouseId")
                        .HasDatabaseName("ix_sale_invoice_slaughterhouse_id");

                    b.ToTable("sale_invoice", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SeedWork.Entities.ColumnViewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .HasColumnType("jsonb")
                        .HasColumnName("state");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_column_view");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_column_view_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_column_view_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_column_view_modified_by");

                    b.ToTable("column_view", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SlaughterhouseAggregate.Entities.SlaughterhouseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.Property<string>("ProducerNumber")
                        .HasColumnType("text")
                        .HasColumnName("producer_number");

                    b.HasKey("Id")
                        .HasName("pk_slaughterhouse");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_slaughterhouse_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_slaughterhouse_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_slaughterhouse_modified_by");

                    b.ToTable("slaughterhouse", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text")
                        .HasColumnName("avatar_path");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<List<IrzplusCredentials>>("IrzplusCredentials")
                        .HasColumnType("jsonb")
                        .HasColumnName("irzplus_credentials");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<bool>("MustChangePassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("must_change_password");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NotificationFarms")
                        .HasColumnType("text")
                        .HasColumnName("notification_farms");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserFarmEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.HasKey("UserId", "FarmId")
                        .HasName("pk_user_farm");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_user_farm_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_user_farm_deleted_by");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_user_farm_farm_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_user_farm_modified_by");

                    b.ToTable("user_farm", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("PermissionName")
                        .HasColumnType("text")
                        .HasColumnName("permission_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_permission");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_user_permission_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_user_permission_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_user_permission_modified_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_permission_user_id");

                    b.ToTable("user_permission", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserSessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<DateTime?>("DeactivatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("LastSeenAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_session");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_user_session_created_by");

                    b.HasIndex("DeletedBy")
                        .HasDatabaseName("ix_user_session_deleted_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_user_session_modified_by");

                    b.HasIndex("SessionId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_session_session_id");

                    b.ToTable("user_session", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany("Employees")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_farm_entity_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeFileEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_file_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_file_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeEntity", "Employee")
                        .WithMany("Files")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_file_employee_employee_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_file_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Employee");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeePayslipEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_payslip_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_payslip_cycle_entity_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_payslip_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_payslip_employee_employee_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_payslip_farm_entity_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_payslip_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Employee");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeReminderEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_reminder_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_reminder_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeEntity", "Employee")
                        .WithMany("Reminders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_reminder_employee_employee_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employee_reminder_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Employee");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseAdvanceCategoryEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_advance_category_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_advance_category_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_advance_category_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseAdvanceEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_advance_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_advance_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expense_advance_employee_employee_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseAdvanceCategoryEntity", "ExpenseAdvanceCategory")
                        .WithMany()
                        .HasForeignKey("ExpenseAdvanceCategoryId")
                        .HasConstraintName("fk_expense_advance_expense_advance_category_expense_advance_ca");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_advance_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Employee");

                    b.Navigation("ExpenseAdvanceCategory");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseAdvancePermissionEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_advance_permission_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_advance_permission_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expense_advance_permission_employee_employee_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_advance_permission_user_modified_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expense_advance_permission_user_entity_user_id");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Employee");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseContractorEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_contractor_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_contractor_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseTypeEntity", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_expense_contractor_expense_type_entity_expense_type_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_contractor_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("ExpenseType");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseProductionEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_production_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expense_production_cycle_entity_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_production_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseContractorEntity", "ExpenseContractor")
                        .WithMany()
                        .HasForeignKey("ExpenseContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expense_production_expense_contractor_expense_contractor_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expense_production_farm_entity_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_production_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("ExpenseContractor");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ExpenseAggregate.Entities.ExpenseTypeEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_type_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_type_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_expense_type_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FallenStockAggregate.Entities.FallenStockEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_fallen_stock_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fallen_stock_cycle_entity_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_fallen_stock_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fallen_stock_farm_entity_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fallen_stock_henhouse_entity_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_fallen_stock_user_modified_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FallenStockAggregate.Entities.UtilizationPlantEntity", "UtilizationPlant")
                        .WithMany()
                        .HasForeignKey("UtilizationPlantId")
                        .HasConstraintName("fk_fallen_stock_utilization_plant_entity_utilization_plant_id");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Henhouse");

                    b.Navigation("Modifier");

                    b.Navigation("UtilizationPlant");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FallenStockAggregate.Entities.FallenStockPickupEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_fallen_stock_pickup_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fallen_stock_pickup_cycle_entity_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_fallen_stock_pickup_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fallen_stock_pickup_farm_entity_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_fallen_stock_pickup_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FallenStockAggregate.Entities.UtilizationPlantEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_utilization_plant_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_utilization_plant_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_utilization_plant_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_cycle_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_cycle_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany("Cycles")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cycle_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_cycle_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "ActiveCycle")
                        .WithMany()
                        .HasForeignKey("ActiveCycleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_farm_cycle_active_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_farm_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_farm_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_farm_user_modified_by");

                    b.Navigation("ActiveCycle");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_henhouse_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_henhouse_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany("Henhouses")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_henhouse_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_henhouse_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.InsertionEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_insertion_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insertion_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_insertion_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insertion_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryEntity", "Hatchery")
                        .WithMany()
                        .HasForeignKey("HatcheryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insertion_hatchery_entity_hatchery_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insertion_henhouse_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_insertion_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Hatchery");

                    b.Navigation("Henhouse");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedContractorEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_contractor_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_contractor_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_contractor_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedInvoiceCorrectionEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_invoice_correction_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_invoice_correction_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_invoice_correction_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_invoice_correction_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_invoice_correction_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedInvoiceEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_invoice_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_invoice_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_invoice_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_invoice_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_invoice_henhouse_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedInvoiceCorrectionEntity", "InvoiceCorrection")
                        .WithMany()
                        .HasForeignKey("InvoiceCorrectionId")
                        .HasConstraintName("fk_feed_invoice_feed_invoice_correction_invoice_correction_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_invoice_user_modified_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedPaymentEntity", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_feed_invoice_feed_payment_entity_payment_id");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Henhouse");

                    b.Navigation("InvoiceCorrection");

                    b.Navigation("Modifier");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedNameEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_name_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_name_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_name_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedPaymentEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_payment_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_payment_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_payment_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_payment_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_payment_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entities.FeedPriceEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_price_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_price_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_price_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_price_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feed_price_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasConsumptionEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_consumption_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gas_consumption_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_consumption_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gas_consumption_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_consumption_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasConsumptionSourceEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_consumption_source_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_consumption_source_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasConsumptionEntity", "GasConsumption")
                        .WithMany("ConsumptionSources")
                        .HasForeignKey("GasConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gas_consumption_source_gas_consumption_gas_consumption_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasDeliveryEntity", "GasDelivery")
                        .WithMany()
                        .HasForeignKey("GasDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gas_consumption_source_gas_delivery_entity_gas_delivery_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_consumption_source_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("GasConsumption");

                    b.Navigation("GasDelivery");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasContractorEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_contractor_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_contractor_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_contractor_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasDeliveryEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_delivery_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_delivery_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gas_delivery_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasContractorEntity", "GasContractor")
                        .WithMany()
                        .HasForeignKey("GasContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gas_delivery_gas_contractor_gas_contractor_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_gas_delivery_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("GasContractor");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryNameEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_name_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_name_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_name_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryNoteEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_note_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_note_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_note_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryPriceEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_price_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_price_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_hatchery_price_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataFailureEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_failure_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_failure_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_failure_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_failure_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_failure_henhouse_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_failure_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Henhouse");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataFlockLossMeasureEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_flock_loss_measure_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_flock_loss_measure_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_flock_loss_measure_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_flock_loss_measure_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryEntity", "Hatchery")
                        .WithMany()
                        .HasForeignKey("HatcheryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_flock_loss_measure_hatchery_hatchery_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_flock_loss_measure_henhouse_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.InsertionEntity", "Insertion")
                        .WithMany()
                        .HasForeignKey("InsertionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_flock_loss_measure_insertion_insertion_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_flock_loss_measure_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Hatchery");

                    b.Navigation("Henhouse");

                    b.Navigation("Insertion");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataRemainingFeedEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_remaining_feed_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_remaining_feed_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_remaining_feed_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_remaining_feed_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_remaining_feed_henhouse_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_remaining_feed_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Henhouse");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataTransferFeedEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_transfer_feed_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_transfer_feed_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "FromCycle")
                        .WithMany()
                        .HasForeignKey("FromCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_transfer_feed_cycle_from_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "FromFarm")
                        .WithMany()
                        .HasForeignKey("FromFarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_transfer_feed_farm_from_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "FromHenhouse")
                        .WithMany()
                        .HasForeignKey("FromHenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_transfer_feed_henhouse_from_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_transfer_feed_user_modified_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "ToCycle")
                        .WithMany()
                        .HasForeignKey("ToCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_transfer_feed_cycle_to_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "ToFarm")
                        .WithMany()
                        .HasForeignKey("ToFarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_transfer_feed_farm_to_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "ToHenhouse")
                        .WithMany()
                        .HasForeignKey("ToHenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_transfer_feed_henhouse_to_henhouse_id");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("FromCycle");

                    b.Navigation("FromFarm");

                    b.Navigation("FromHenhouse");

                    b.Navigation("Modifier");

                    b.Navigation("ToCycle");

                    b.Navigation("ToFarm");

                    b.Navigation("ToHenhouse");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataWeighingEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_weighing_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_weighing_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_weighing_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_weighing_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryEntity", "Hatchery")
                        .WithMany()
                        .HasForeignKey("HatcheryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_weighing_hatchery_hatchery_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_data_weighing_henhouse_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_weighing_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Hatchery");

                    b.Navigation("Henhouse");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.ProductionDataAggregate.Entities.ProductionDataWeightStandardEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_weight_standard_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_weight_standard_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_production_data_weight_standard_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SaleAggregate.Entities.SaleEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sale_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sale_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_henhouse_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sale_user_modified_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.SlaughterhouseAggregate.Entities.SlaughterhouseEntity", "Slaughterhouse")
                        .WithMany()
                        .HasForeignKey("SlaughterhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_slaughterhouse_entity_slaughterhouse_id");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Henhouse");

                    b.Navigation("Modifier");

                    b.Navigation("Slaughterhouse");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SaleAggregate.Entities.SaleFieldExtraEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sale_field_extra_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sale_field_extra_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sale_field_extra_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SaleAggregate.Entities.SaleInvoiceEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sale_invoice_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_invoice_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sale_invoice_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_invoice_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sale_invoice_user_modified_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.SlaughterhouseAggregate.Entities.SlaughterhouseEntity", "Slaughterhouse")
                        .WithMany()
                        .HasForeignKey("SlaughterhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_invoice_slaughterhouse_entity_slaughterhouse_id");

                    b.Navigation("Creator");

                    b.Navigation("Cycle");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");

                    b.Navigation("Slaughterhouse");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SeedWork.Entities.ColumnViewEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_column_view_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_column_view_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_column_view_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SlaughterhouseAggregate.Entities.SlaughterhouseEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_slaughterhouse_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_slaughterhouse_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_slaughterhouse_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserFarmEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_farm_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_farm_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_farm_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_farm_user_modified_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "User")
                        .WithMany("Farms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_farm_user_user_id");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Farm");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserPermissionEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_permission_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_permission_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_permission_user_modified_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permission_user_user_id");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserSessionEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_session_user_created_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_session_user_deleted_by");

                    b.HasOne("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_session_user_modified_by");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.EmployeeAggregate.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", b =>
                {
                    b.Navigation("Cycles");

                    b.Navigation("Employees");

                    b.Navigation("Henhouses");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.GasAggregate.Entities.GasConsumptionEntity", b =>
                {
                    b.Navigation("ConsumptionSources");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", b =>
                {
                    b.Navigation("Farms");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
