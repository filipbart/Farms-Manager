// <auto-generated />
using System;
using FarmsManager.Domain.Aggregates.UserAggregate.Models;
using FarmsManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FarmsManager.Infrastructure.Migrations
{
    [DbContext(typeof(FarmsManagerContext))]
    [Migration("20250722154247_AddFeedInvoiceCorrectionEntity")]
    partial class AddFeedInvoiceCorrectionEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("farms_manager")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<int>("Identifier")
                        .HasColumnType("integer")
                        .HasColumnName("identifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_cycle");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_cycle_farm_id");

                    b.HasIndex("Identifier", "Year", "FarmId")
                        .IsUnique()
                        .HasDatabaseName("ix_cycle_identifier_year_farm_id");

                    b.ToTable("cycle", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ActiveCycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("active_cycle_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.Property<string>("ProducerNumber")
                        .HasColumnType("text")
                        .HasColumnName("producer_number");

                    b.HasKey("Id")
                        .HasName("pk_farm");

                    b.HasIndex("ActiveCycleId")
                        .HasDatabaseName("ix_farm_active_cycle_id");

                    b.ToTable("farm", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Area")
                        .HasColumnType("integer")
                        .HasColumnName("area");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_henhouse");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_henhouse_farm_id");

                    b.ToTable("henhouse", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.InsertionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BodyWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("body_weight");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateIrzSentUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_irz_sent_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text")
                        .HasColumnName("document_number");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid>("HatcheryId")
                        .HasColumnType("uuid")
                        .HasColumnName("hatchery_id");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<DateOnly>("InsertionDate")
                        .HasColumnType("date")
                        .HasColumnName("insertion_date");

                    b.Property<Guid>("InternalGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("internal_group_id");

                    b.Property<bool>("IsSentToIrz")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent_to_irz");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("SentToIrzBy")
                        .HasColumnType("uuid")
                        .HasColumnName("sent_to_irz_by");

                    b.HasKey("Id")
                        .HasName("pk_insertion");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_insertion_farm_id");

                    b.HasIndex("HatcheryId")
                        .HasDatabaseName("ix_insertion_hatchery_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_insertion_henhouse_id");

                    b.HasIndex("CycleId", "FarmId", "HenhouseId")
                        .IsUnique()
                        .HasDatabaseName("ix_insertion_cycle_id_farm_id_henhouse_id");

                    b.ToTable("insertion", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.SaleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("base_price");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("ConfiscatedCount")
                        .HasColumnType("integer")
                        .HasColumnName("confiscated_count");

                    b.Property<decimal>("ConfiscatedWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("confiscated_weight");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateIrzSentUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_irz_sent_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<int>("DeadCount")
                        .HasColumnType("integer")
                        .HasColumnName("dead_count");

                    b.Property<decimal>("DeadWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("dead_weight");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text")
                        .HasColumnName("document_number");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<decimal>("FarmerWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("farmer_weight");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<Guid>("InternalGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("internal_group_id");

                    b.Property<bool>("IsSentToIrz")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent_to_irz");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("OtherExtras")
                        .HasColumnType("jsonb")
                        .HasColumnName("other_extras");

                    b.Property<decimal>("PriceWithExtras")
                        .HasColumnType("numeric")
                        .HasColumnName("price_with_extras");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateOnly>("SaleDate")
                        .HasColumnType("date")
                        .HasColumnName("sale_date");

                    b.Property<Guid?>("SentToIrzBy")
                        .HasColumnType("uuid")
                        .HasColumnName("sent_to_irz_by");

                    b.Property<Guid>("SlaughterhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("slaughterhouse_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_sale");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_sale_cycle_id");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_sale_farm_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_sale_henhouse_id");

                    b.HasIndex("SlaughterhouseId")
                        .HasDatabaseName("ix_sale_slaughterhouse_id");

                    b.ToTable("sale", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.SaleFieldExtraEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_sale_field_extra");

                    b.ToTable("sale_field_extra", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entites.FeedInvoiceCorrectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<decimal>("InvoiceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("invoice_total");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("vat_amount");

                    b.HasKey("Id")
                        .HasName("pk_feed_invoice_correction");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_feed_invoice_correction_farm_id");

                    b.ToTable("feed_invoice_correction", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entites.FeedInvoiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("text")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<decimal?>("CorrectUnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("correct_unit_price");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("HenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("henhouse_id");

                    b.Property<Guid?>("InvoiceCorrectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_correction_id");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<decimal>("InvoiceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("invoice_total");

                    b.Property<string>("ItemName")
                        .HasColumnType("text")
                        .HasColumnName("item_name");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("PaymentDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date_utc");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("vat_amount");

                    b.Property<string>("VendorName")
                        .HasColumnType("text")
                        .HasColumnName("vendor_name");

                    b.HasKey("Id")
                        .HasName("pk_feed_invoice");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_feed_invoice_cycle_id");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_feed_invoice_farm_id");

                    b.HasIndex("HenhouseId")
                        .HasDatabaseName("ix_feed_invoice_henhouse_id");

                    b.HasIndex("InvoiceCorrectionId")
                        .HasDatabaseName("ix_feed_invoice_invoice_correction_id");

                    b.ToTable("feed_invoice", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entites.FeedNameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_feed_name");

                    b.ToTable("feed_name", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entites.FeedPriceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farm_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateOnly>("PriceDate")
                        .HasColumnType("date")
                        .HasColumnName("price_date");

                    b.HasKey("Id")
                        .HasName("pk_feed_price");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_feed_price_cycle_id");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_feed_price_farm_id");

                    b.ToTable("feed_price", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.Property<string>("ProducerNumber")
                        .HasColumnType("text")
                        .HasColumnName("producer_number");

                    b.HasKey("Id")
                        .HasName("pk_hatchery");

                    b.ToTable("hatchery", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.SlaughterhouseAggregate.Entities.SlaughterhouseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasColumnType("text")
                        .HasColumnName("nip");

                    b.Property<string>("ProducerNumber")
                        .HasColumnType("text")
                        .HasColumnName("producer_number");

                    b.HasKey("Id")
                        .HasName("pk_slaughterhouse");

                    b.ToTable("slaughterhouse", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<IrzplusCredentials>("IrzplusCredentials")
                        .HasColumnType("jsonb")
                        .HasColumnName("irzplus_credentials");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.UserAggregate.Entities.UserSessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted_utc");

                    b.Property<DateTime?>("DateModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified_utc");

                    b.Property<DateTime?>("DeactivatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("LastSeenAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_session");

                    b.HasIndex("SessionId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_session_session_id");

                    b.ToTable("user_session", "farms_manager");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany("Cycles")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cycle_farm_farm_id");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "ActiveCycle")
                        .WithMany()
                        .HasForeignKey("ActiveCycleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_farm_cycle_active_cycle_id");

                    b.Navigation("ActiveCycle");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany("Henhouses")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_henhouse_farm_farm_id");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.InsertionEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insertion_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insertion_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.HatcheryAggregate.Entities.HatcheryEntity", "Hatchery")
                        .WithMany()
                        .HasForeignKey("HatcheryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insertion_hatchery_entity_hatchery_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insertion_henhouse_henhouse_id");

                    b.Navigation("Cycle");

                    b.Navigation("Farm");

                    b.Navigation("Hatchery");

                    b.Navigation("Henhouse");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.SaleEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_henhouse_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.SlaughterhouseAggregate.Entities.SlaughterhouseEntity", "Slaughterhouse")
                        .WithMany()
                        .HasForeignKey("SlaughterhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_slaughterhouse_entity_slaughterhouse_id");

                    b.Navigation("Cycle");

                    b.Navigation("Farm");

                    b.Navigation("Henhouse");

                    b.Navigation("Slaughterhouse");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entites.FeedInvoiceCorrectionEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_invoice_correction_farm_farm_id");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entites.FeedInvoiceEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_invoice_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_invoice_farm_farm_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.HenhouseEntity", "Henhouse")
                        .WithMany()
                        .HasForeignKey("HenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_invoice_henhouse_henhouse_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FeedAggregate.Entites.FeedInvoiceCorrectionEntity", "InvoiceCorrection")
                        .WithMany()
                        .HasForeignKey("InvoiceCorrectionId")
                        .HasConstraintName("fk_feed_invoice_feed_invoice_correction_invoice_correction_id");

                    b.Navigation("Cycle");

                    b.Navigation("Farm");

                    b.Navigation("Henhouse");

                    b.Navigation("InvoiceCorrection");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FeedAggregate.Entites.FeedPriceEntity", b =>
                {
                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.CycleEntity", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_price_cycle_cycle_id");

                    b.HasOne("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_price_farm_farm_id");

                    b.Navigation("Cycle");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("FarmsManager.Domain.Aggregates.FarmAggregate.Entities.FarmEntity", b =>
                {
                    b.Navigation("Cycles");

                    b.Navigation("Henhouses");
                });
#pragma warning restore 612, 618
        }
    }
}
